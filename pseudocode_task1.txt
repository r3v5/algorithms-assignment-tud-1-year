// Structures
Structure DateTime:
    hour
    minute
    day
    month
    year
EndStructure

Structure Issue:
    issue_code
    description
EndStructure

Structure Resolution:
    resolution_code
    description
EndStructure

Structure QaLog:
    line_code;
    batch_code;
    struct DateTime date_time;
    product_id;
    struct Issue issue;
    struct Resolution resolution;
    reporting_employee_id
EndStructure


// Functions
Program CompareLogs
    Read log1, log2

    If (log1.product_id != log2.product_id)
        return log1.product_id - log2.product_id
    EndIf
    If (log1.issue.issue_code != log2.issue.issue_code)
        return log1.issue.issue_code - log2.issue.issue_code
    EndIf
    If (log1.date_time.year != log2.date_time.year)
        return log1.date_time.year - log2.date_time.year
    EndIf
    If (log1.date_time.month != log2.date_time.month)
        return log1.date_time.month - log2.date_time.month
    EndIf
    If (log1.date_time.day != log2.date_time.day)
        return log1.date_time.day - log2.date_time.day
    EndIf
    If (log1.date_time.hour != log2.date_time.hour)
        return log1.date_time.hour - log2.date_time.hour
    EndIf
    If (log1.date_time.minute != log2.date_time.minute)
        return log1.date_time.minute - log2.date_time.minute
    EndIf
    Else (
        return 0
    )
EndProgram


Program DisplayQaLogs
    Read qa_logs, size_of_logs
    i = 0
    N = size_of_logs

    While (i < N)
        Print(
            qa_logs[i].line_code, qa_logs[i].batch_code,
            qa_logs[i].date_time.day, qa_logs[i].date_time.month, qa_logs[i].date_time.year,
            qa_logs[i].date_time.hour, qa_logs[i].date_time.minute,
            qa_logs[i].product_id,
            qa_logs[i].issue.issue_code, qa_logs[i].issue.description,
            qa_logs[i].resolution.resolution_code, qa_logs[i].resolution.description,
            qa_logs[i].reporting_employee_id
        )
        i++
    EndWhile
EndProgram


Program Merge
    Read arr, low, mid, high
    i, j, k
    n1 = mid - low + 1
    n2 = high - mid

    struct QaLog L[n1], R[n2]

    i = 0, j = 0
    While (i < n1)
        L[i] = arr[low + i]
    EndWhile
    While (j < n2)
        R[j] = arr[mid + 1 + j]
    EndWhile

    i = 0, j = 0, k = low
    While (i < n1 and j < n2)
        If (CompareLogs(&L[i], &R[j]) <= 0)
            arr[k] = L[i]
            i++
        EndIf
        Else
            arr[k] = R[j]
            j+=
        EndElse
        k++
    EndWhile

    While (i < n1)
        arr[k] = L[i]
        i++
        k++
    EndWhile

    While (j < n2)
        arr[k] = R[j]
        j++
        k++
    EndWhile
EndProgram


Program MergeSort
    Read arr, low, high

    If (low < high)
        mid = low + (high - low) / 2
        MergeSort(arr, low, mid)
        MergeSort(arr, mid + 1, high)
        Merge(arr, low, mid, high)
    EndIf
EndProgram


Program Main
    struct QaLog qa_logs = {}
    size_of_logs = qa_logs.Length
    merge_sort(qa_logs, 0, size_of_logs - 1)
    DisplayQaLogs(qa_logs, size_of_logs)
    return 0
EndProgram